3dl
############################################################################
# File automatically generated by the 3delight shader compiler.            #
# DO NOT EDIT THIS FILE !!!                                                #
############################################################################

# Compiled with 3Delight 11.0.4 win64 (Oct 11 2013, 9c14e5) "Berto Durante"

%code 7 121
3

0
0
0
0
1
0
0
0
0
1
1
0
0
0
0
0
0
1
1
1
1
1
1
0
0
0
0
0
37
0 12 0
0 4 ""
0 4 "Sides"
0 4 "geometry:geometricnormal"
0 4 "Ri:Orientation"
0 4 "outside"
0 1 3.00000000e+000
0 1 4.00000000e+000
0 4 "type"
0 4 "world"
0 1 3.00000012e-001
0 1 0.00000000e+000
0 1 5.89999974e-001
0 1 1.00000000e+000
0 1 1.09999999e-001
0 1 2.00000000e+000
0 1 6.40000000e+001
0 1 9.99999962e+035
0 4 "cosine"
0 4 "light"
0 4 "environment:"
0 4 "environment:color"
0 4 "environment:direction"
0 4 "environment:solidangle"
0 1 1.00000005e-003
0 1 9.99999978e-003
0 1 6.55340000e+004
0 4 "user:bake_file"
0 4 "user:maya_ptc_maxsolidangle"
0 4 "photon:globalmap"
0 4 "both"
0 4 "diffuse"
0 1 3.18309873e-001
0 1 1.57079637e+000
0 1 3.33333343e-001
0 1 7.95774683e-002
0 1 1.59154937e-001
27
"effect" "" 2 1 0 0 0 0
"color_bleeding_intensity" "" 2 1 0 0 0 0
"black_point" "rgb" 2 3 0 0 0 0
"white_point" "rgb" 2 3 0 0 0 0
"samples" "" 2 1 0 0 0 0
"maxdist" "" 2 1 0 0 0 0
"distribution" "" 2 4 0 0 0 0
"envmap" "" 2 4 0 0 0 0
"envspace" "" 2 4 0 0 0 0
"falloffmode" "" 2 1 0 0 0 0
"falloff" "" 2 1 0 0 0 0
"environment_intensity" "" 2 1 0 0 0 0
"environment_color_gain" "rgb" 2 3 0 0 0 0
"environment_color_offset" "rgb" 2 3 0 0 0 0
"environment_casts_shadows" "" 2 1 0 0 0 0
"only_aovs" "" 2 1 0 0 0 0
"point_based_bias" "" 2 1 0 0 0 0
"use_deprecated_gi" "" 2 1 0 0 0 0
"__nondiffuse" "" 2 1 0 0 0 0
"__nonspecular" "" 2 1 0 0 0 0
"__category" "" 2 4 0 0 0 0
"__3dfm_shadowing" "" 3 1 0 0 1 0
"__3dfm_unshadowed_cl" "rgb" 3 3 0 0 1 0
"__occlusion" "" 3 1 0 0 1 0
"__visibility" "rgb" 3 3 0 0 1 0
"__environment_diffuse" "rgb" 3 3 0 0 1 0
"__color_bleeding" "rgb" 3 3 0 0 1 0
0
0
0
0
0
0
0
0


3

1 65 41 

1
3 

3

1 66 41 

1
3 

3

4 67 39 

1
3 

3

4 68 39 

1
3 

3

1 69 44 

1
3 

3

1 70 45 

1
3 

3

7 71 46 

1
3 

3

7 72 29 

1
3 

3

7 73 37 

1
3 

3

1 74 39 

1
3 

3

1 75 41 

1
3 

3

1 76 41 

1
3 

3

4 77 41 

1
3 

3

4 78 39 

1
3 

3

1 79 39 

1
3 

3

1 80 39 

1
3 

3

1 81 52 

1
3 

3

1 82 39 

1
3 

3

1 83 39 

1
3 

3

1 84 41 

1
3 

3

7 85 29 

1
3 

3

1 86 39 

1
3 

3

4 87 39 

1
3 

3

1 88 39 

1
3 

3

4 89 41 

1
3 

3

4 90 39 

1
3 

3

4 91 39 

1
3 

0
0

0

0

0

0

1
"light"
9
4
22
19
20
18
17
21
9
10
2
"*L" 3 8 0 0 1 0
"*Cl" 3 3 0 0 1 0
0
0

0


0

0


0

8
4 0 0 0
4 0 0 0
10 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
3 0 0 0
12 0 0 0
20
10 0 0 0
10 0 0 0
10 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
3 0 0 0
3 0 0 0
8 0 0 0
9 0 0 0
9 0 0 0
8 0 0 0
2 0 0 0
8 0 0 0
2 0 0 0
2 0 0 0
2 0 0 0
8 0 0 0
948

9 19 39 39 39 
9 18 39 39 39 
9 20 41 41 41 
7 92 29 
203 95 36 92 
43 94 65 39 
232 94 0 3 
4 19 39 
233 912 
45 100 92 47 
232 100 0 154 
42 100 43 65 
232 100 0 4 
46 100 72 29 
234 
232 100 0 4 
41 100 39 76 
234 
232 100 0 127 
170 2 92 48 72 
4 110 39 
4 108 39 
1 103 39 
135 115 110 1 
9 116 39 39 39 
220 116 117 118 
180 92 116 117 118 115 39 69 99 13 28 28 28 28 28 28 28 28 28 28 28 28 28 3 51 50 49 103 110 108 
181 99 101 102 3 103 110 108 
235 101 57 
232 102 0 50 
12 110 110 73 
40 119 110 
24 104 103 64 
20 105 41 104 
62 106 105 
175 100 17 119 106 18 
232 100 0 21 
26 109 108 77 
19 19 109 78 
24 95 76 63 
25 19 19 95 
176 17 18 19 106 
234 
234 
236 -68 
182 99 
234 
233 747 
4 19 39 
1 88 39 
4 89 41 
4 90 39 
4 91 39 
135 110 21 1 
2 112 110 
1 95 43 
200 96 30 95 
43 100 95 43 
232 100 0 4 
139 112 110 4 
233 32 
1 95 41 
200 96 31 95 
43 102 95 39 
232 102 0 16 
200 97 32 93 
45 101 93 33 
232 101 0 3 
40 112 112 
234 
234 
234 
2 111 112 
7 93 71 
46 100 72 29 
232 100 0 4 
43 100 65 34 
234 
232 100 0 4 
44 100 79 39 
234 
232 100 0 3 
7 93 72 
234 
7 92 29 
1 97 53 
201 96 55 92 
201 95 56 97 
19 118 17 112 
173 100 118 28 28 17 18 
232 100 0 605 
43 102 65 54 
232 102 0 39 
7 92 29 
200 96 57 92 
46 101 92 29 
232 101 0 18 
2 117 17 
220 117 116 115 
168 3 19 92 117 110 28 28 41 116 115 
233 3 
4 19 39 
234 
233 550 
43 101 65 41 
232 101 0 126 
2 115 17 
220 115 116 117 
163 37 88 115 111 69 28 28 70 28 28 28 73 28 28 28 93 28 28 28 28 28 75 74 28 28 28 28 41 28 28 28 28 28 28 28 28 28 28 28 28 28 28 116 117 
20 103 41 88 
4 89 103 
153 89 67 68 89 
42 100 80 39 
232 100 0 53 
41 100 39 82 
232 100 0 36 
2 87 68 
21 109 41 89 
126 103 109 
24 106 38 103 
127 105 109 
24 104 40 105 
17 103 106 104 
128 104 109 
24 105 42 104 
17 86 103 105 
233 6 
2 87 89 
2 19 87 
234 
234 
233 413 
43 100 65 43 
232 100 0 52 
46 100 72 29 
232 100 0 43 
15 112 111 73 
135 117 112 1 
167 109 72 117 
26 90 77 109 
19 90 90 78 
24 95 76 60 
25 90 90 95 
42 100 80 39 
232 100 0 6 
2 87 90 
2 19 90 
234 
234 
233 350 
41 100 39 66 
232 100 0 341 
1 107 39 
4 108 39 
43 100 65 35 
232 100 0 55 
1 95 61 
2 117 17 
220 117 116 115 
164 37 109 117 111 39 95 81 70 28 28 72 73 108 28 107 28 28 28 92 28 58 28 28 97 41 28 41 28 28 28 37 28 28 41 28 28 28 28 28 28 28 28 116 115 
233 150 
41 100 39 82 
232 100 0 52 
2 115 17 
220 115 116 117 
164 37 109 115 111 69 28 28 70 28 28 72 73 108 28 107 93 28 28 28 28 28 75 74 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 116 117 
233 87 
25 98 77 76 
2 117 17 
220 117 116 115 
2 114 111 
220 114 113 119 
162 25 109 117 114 28 69 28 70 28 28 28 28 59 28 89 28 46 28 28 28 72 73 98 28 28 28 90 28 28 28 116 115 113 119 
23 91 109 90 
126 105 89 
127 104 89 
17 103 105 104 
128 104 89 
17 105 103 104 
24 106 105 62 
20 88 41 106 
153 89 67 68 89 
234 
234 
41 100 39 82 
232 100 1 4 
43 100 65 35 
234 
232 100 0 35 
23 91 109 108 
25 91 91 66 
1 88 107 
26 109 77 108 
19 90 109 78 
25 90 90 76 
20 106 41 88 
4 89 106 
153 89 67 68 89 
234 
42 100 80 39 
232 100 0 57 
41 100 39 82 
232 100 0 39 
2 87 90 
21 109 41 89 
126 106 109 
24 105 38 106 
127 104 109 
24 103 40 104 
17 104 105 103 
128 105 109 
24 103 42 105 
17 86 104 103 
2 19 90 
233 7 
19 87 90 91 
2 19 87 
234 
234 
234 
234 
234 
234 
174 17 18 19 28 
234 
234 
234 

227
5 10 15 18 22 26 30 33 35 39 43 47 51 55 56 60 64 65 69 74 
77 80 83 87 92 96 126 134 137 141 145 148 152 156 159 165 169 173 177 181 
185 190 191 192 194 196 197 199 202 205 208 211 214 218 221 224 228 232 236 240 
242 245 249 253 257 261 265 269 272 273 274 275 278 281 285 289 293 294 298 302 
303 307 310 311 314 317 321 325 329 336 340 344 348 351 355 359 363 366 370 381 
383 386 387 389 393 397 400 404 449 453 456 461 465 469 473 477 480 484 487 491 
494 498 502 505 509 513 515 518 521 522 523 525 529 533 537 541 545 549 553 557 
561 565 569 573 577 580 583 584 585 587 591 595 598 601 605 609 612 615 619 664 
666 670 674 677 681 726 728 732 735 739 742 746 781 785 788 791 795 798 802 806 
810 815 816 817 821 825 829 830 834 838 842 845 849 853 857 861 864 869 870 874 
878 882 886 889 893 896 900 903 907 911 914 918 922 925 927 931 934 935 936 937 
938 939 940 945 946 947 948 

%comment-3dl 7 121
4
"MacroBlocks_light"
"MTUKMCAzCiAwIDAgMwogMTkgMjAgMTgKMTUgMwogMSAxIDAKIDc2IDEwMAoyMCA1CiAwIDAgNQogMTAzIDEwOCAxMTAgMTE1IDExNgozMSA0CiAyIDAgMgogMTAzIDExMCAxMDYgMTE5CjM3IDQKIDQgMCAxCiAxMDggNzYgNzcgNzggMTkKNDggOAogMSA0IDQKIDIxIDg4IDg5IDkwIDkxIDk1IDExMCAxMTIgMTkKNjcgMwogMSAxIDAKIDEwMSAxMTIKNzUgNgogMiAxIDAKIDY1IDc5IDEwMAoxMDkgMjIKIDUgNCAwCiA2NyA2OCA4MCA4MiA4OCAxOSA4NiA4NyA4OQoxMzkgOQogNSAzIDAKIDEwOSA3NiA3NyA3OCA4MCAxOSA4NyA5MAoxNTIgMwogMSAwIDMKIDY1IDEwMCAxMDcgMTA4CjE1NiAyCiAxIDAgMgogMTcgOTUgMTE3CjE2NyAyCiAzIDAgMgogMTcgNzYgNzcgOTggMTE3CjE3MyA5CiA0IDMgMAogMTA5IDY3IDY4IDkwIDg4IDg5IDkxCjE4NCAzNQogMTIgNyAwCiAxMDcgMTA4IDEwOSA2NSA2NiA2NyA2OCA3NiA3NyA3OCA4MCA4MiAxOSA4NiA4NyA4OCA4OSA5MCA5MQ=="
"OpCodesForDerivatives_light"
"MAo="
"ScopeBlocks_light"
"MTMKMTUgMgogMSAxIDAKIDc2IDEwMAo2NyAyCiAwIDEgMAogMTEyCjc1IDIKIDEgMSAwCiA2NSAxMDAKNzggMgogMSAxIDAKIDc5IDEwMAoxMTMgMTcKIDMgMyAwCiA2OCA4MiA4OSAxOSA4NiA4NwoxMTUgMTEKIDIgMiAwCiA2OCA4OSA4NiA4NwoxMjYgMwogMSAyIDAKIDg5IDE5IDg3CjE0NCAzCiAxIDIgMAogOTAgMTkgODcKMTg1IDIKIDEgMSAwCiA2NSAxMDAKMTg4IDEwCiA5IDQgMAogMTA3IDEwOCAxMDkgNjYgNjcgNjggNzYgNzcgNzggODggODkgOTAgOTEKMjAwIDE4CiA0IDMgMAogODIgODkgOTAgOTEgMTkgODYgODcKMjAyIDEyCiAyIDIgMQogODkgOTAgODYgODcgMTkKMjE0IDMKIDIgMSAxCiA5MCA5MSA4NyAxOQ=="
"source"
""
%comment-user 7 121
0

